generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId String   @unique @map("supabaseUser_id")
  name           String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  email          String?
  children       Child[]
  longVacations  LongVacation[]
  homeworks Homework[]

  @@map("users")
}

model Child {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  longVacations     LongVacation[]
  homeworks Homework[]

  @@map("children")
}

model Homework {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String?
  dueDate     DateTime @map("due_date")
  submitted   Boolean  @default(false) @map("submitted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id") @db.Uuid
  childId     String   @map("child_id") @db.Uuid
  child       Child    @relation(fields: [childId], references: [id],onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  longVacation    LongVacation?         @relation(fields: [longVacationId], references: [id],onDelete: Cascade)
  longVacationId  String?           @map("longVacation_id") @db.Uuid
  @@map("homeworks")
}

model LongVacation {
  id          String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  startDate   DateTime        @map("start_date")
  endDate     DateTime        @map("end_date")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  userId      String           @map("user_id") @db.Uuid
  childId     String           @map("child_id") @db.Uuid
  schoolDay   DateTime?
  isActive    Boolean
  child       Child            @relation(fields: [childId], references: [id],onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id],onDelete: Cascade)
  homeworks   Homework[]
  @@map("longVacations")
}

enum Frequency {
  DAILY
  WEEKDAY
  WEEKEND
  CUSTOM
}
